{"version":3,"sources":["components/Header.js","components/Article.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Article","state","this","props","title","date","text1","text2","text3","text4","img1","src","width","alt","img2","Component","App","console","log","articles","components_Header","map","article","key","components_Article","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAeeA,MAdf,WAEI,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,qCCwBDE,6MA7BXC,MAAQ,2EAEJ,OACIL,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYG,KAAKC,MAAMC,OACrCR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAA4BG,KAAKC,MAAME,OAE3DT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQG,KAAKC,MAAMG,OAChCV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQG,KAAKC,MAAMI,OAChCX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQG,KAAKC,MAAMK,OAChCZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQG,KAAKC,MAAMM,OAE5BP,KAAKC,MAAMO,KACPd,EAAAC,EAAAC,cAAA,OAAKa,IAAKT,KAAKC,MAAMO,KAAME,MAAM,OAAOC,IAAI,UAAU,GAG1DX,KAAKC,MAAMW,KACPlB,EAAAC,EAAAC,cAAA,OAAKa,IAAKT,KAAKC,MAAMW,KAAMD,IAAI,UAAU,aArBnDE,oBCgCPC,mLAxBX,OADAC,QAAQC,IAAIC,GAEVvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsB,EAAD,MAEED,EAASE,IAAI,SAACC,EAASC,GACrB,OACE3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEpB,MAAOkB,EAAQlB,MACfC,KAAMiB,EAAQjB,KACdC,MAAOgB,EAAQhB,MACfC,MAAOe,EAAQf,MACfC,MAAOc,EAAQd,MACfC,MAAOa,EAAQb,MACfC,KAAMY,EAAQZ,KACdI,KAAMQ,EAAQR,KACdS,IAAKA,cAnBHR,aCIEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dafcf3e9.chunk.js","sourcesContent":["import React from 'react';\nfunction Header(){\n\n    return (  \n        <header className=\"bg-secondary text-light container-fluid text-center\">\n            <div className=\"jumbotron container bg-secondary\">\n                <h1>Web Study 2018-09</h1>\n                <h2>https://csslick.github.io/web0809r/</h2>\n                <h2>http://192.168.0.114</h2>\n            </div>\n        </header>           \n    );\n\n}\n \nexport default Header;","import React, { Component } from 'react';\n\nclass Article extends Component {\n    state = {  }\n    render() { \n        return (  \n            <section className='container'>\n                <header className=\"row\">\n                    <h1 className='col-sm-8'>{this.props.title}</h1>\n                    <time className='col-sm-4 text-right time'>{this.props.date}</time>\n                </header>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"text\">{this.props.text1}</p>\n                        <p className=\"text\">{this.props.text2}</p>\n                        <p className=\"text\">{this.props.text3}</p>\n                        <p className=\"text\">{this.props.text4}</p>\n                        {\n                            this.props.img1?\n                                <img src={this.props.img1} width=\"100%\" alt=\"image\"/>:''\n                        }    \n                        {\n                            this.props.img2?\n                                <img src={this.props.img2} alt=\"image\"/>:''\n                        }                            \n                    </div>\n                </div>\n            </section>     \n        );\n    }\n}\n\nexport default Article;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Article from './components/Article';\nimport articles from './data/data.json';\n\nclass App extends Component {\n\n  render() {\n    console.log(articles);\n    return (\n      <div className=\"App\">\n        <Header/>\n        {\n          articles.map((article, key) => {\n            return (\n              <Article \n                title={article.title}\n                date={article.date}\n                text1={article.text1}\n                text2={article.text2}\n                text3={article.text3}\n                text4={article.text4}\n                img1={article.img1}\n                img2={article.img2}\n                key={key} />\n            )    \n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}